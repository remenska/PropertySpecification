% comment
% Existence: P occurs (between Q and R)
% formula [true*. Q. (not (P or R))*. R] false

sort Action = struct p | q | r;

sort ActionFormula = struct action(act1:Action)  |
  and(phi1:ActionFormula,phi2:ActionFormula) | 
    or(phi1:ActionFormula,phi2:ActionFormula) | 
			    not(ActionFormula);

map satisfy: Action # ActionFormula -> Bool;
var c1,c2:Action;
  f,g:ActionFormula;

eqn
    satisfy(c1,action(c2)) = c1 == c2; 
    satisfy(c1,and(f,g)) = satisfy(c1,f) && satisfy(c1,g);
    satisfy(c1,not(f)) = !satisfy(c1,f);
    satisfy(c1,or(f,g)) = satisfy(c1,f) || satisfy(c1,g);

act p,q,r,error,internal;

 proc Proc_true = satisfy(p,or(or(action(p),action(q)),action(r))) -> p + 
		  satisfy(q,or(or(action(p),action(q)),action(r))) -> q + 
		  satisfy(r,or(or(action(p),action(q)),action(r))) -> r
;
proc Proc_true_plus = Proc_true.Proc_true_plus + Proc_true;

proc Proc_true_star = internal + Proc_true_plus;

proc Proc_Q = q;
proc Proc_R = r;
proc Proc_alpha =  satisfy(p,not(or(action(p),action(r)))) -> p
		  + satisfy(q,not(or(action(p),action(r)))) -> q
		  + satisfy(r,not(or(action(p),action(r)))) -> r
;

proc Proc_alpha_plus = Proc_alpha.Proc_alpha_plus + Proc_alpha;

proc Proc_alpha_star = internal + Proc_alpha_plus;

proc Proc_alpha1 = Proc_true_star.Proc_Q.Proc_alpha_star.Proc_R;

proc Proc_monitor = Proc_alpha1.error;


init hide ({internal},
Proc_monitor);